# -*- coding: utf-8 -*-
"""Data_Merging_ListingA1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKkj4vpSgq_M2ga9mg6YgaJ3DBlQPXHN

#CRISP-DM Methodology
**Title:** Impact of electric vehicles adoption on energy demand in the U.S.: A forecasting supervised model with environmental contextualization

**Author:** Daniela Katherin Soriano Hernández

**Institution:** Universidad Nacional de Colombia

#2. Data Understanding

## Normalization
"""

#Libraries
import pandas as pd
from google.colab import drive

drive.mount('/content/drive')

"""### Electricity Sales"""

elecsales = '/content/drive/MyDrive/2025-1/Monografia/Datasets & Data Dictionary/Current! Monthly Datasets and Data Dictionary/Data Understanding/electricity_end_use.xlsx - Monthly Data (1).csv'  # debe coincidir con el nombre del archivo subido
elecsales_df = pd.read_csv(elecsales)
print(elecsales_df.head())



"""### Electric mix"""

# Leer todas las hojas del archivo Excel
electric_mix = '/content/drive/MyDrive/2025-1/Monografia/Datasets & Data Dictionary/Current! Monthly Datasets and Data Dictionary/4. generation_monthly electricity mix.xlsx'  # debe coincidir con el nombre del archivo subido
xls = pd.ExcelFile(electric_mix)
all_sheets = [xls.parse(sheet) for sheet in xls.sheet_names]

print(all_sheets)

electric_mix_df = pd.concat(all_sheets, ignore_index=True) #centralizar info
electric_mix_df.head() #verificacion

print("Columns in electric_mix_df after concatenation:")
print(electric_mix_df.columns)

# verificación de la existencia de 2011
print(electric_mix_df['YEAR'].unique())
print(electric_mix_df['STATE'].unique())
electric_mix_df[electric_mix_df['YEAR'] == 2011]

electric_mix_df = electric_mix_df[electric_mix_df['STATE'] == 'US-Total']
electric_mix_df = electric_mix_df[electric_mix_df['TYPE OF PRODUCER'] == 'Total Electric Power Industry']
electric_mix_df.head()

electric_mix_df = electric_mix_df[electric_mix_df['ENERGY SOURCE'].str.lower() != 'total']
electric_mix_df['GENERATION (Megawatthours)'] = pd.to_numeric(electric_mix_df['GENERATION (Megawatthours)'], errors='coerce')
electric_mix_df['date'] = pd.to_datetime(electric_mix_df['YEAR'].astype(str) + '-' + electric_mix_df['MONTH'].astype(str) + '-01')
electric_mix_df_simplified = ['date', 'ENERGY SOURCE', 'GENERATION (Megawatthours)']
electric_mix_df_grouped = electric_mix_df.groupby(['date', 'ENERGY SOURCE'])['GENERATION (Megawatthours)'].sum()
electric_mix_df_grouped.tail()

"""Clasificación por Tipos de enegías"""

print(electric_mix_df['ENERGY SOURCE'].unique())

def classificate_source(source):
  # Indent the code block belonging to the function
  source = source.lower()
  if source in ['coal', 'natural gas', 'petroleum', 'other gases']: # Changed to lowercase to match the source.lower()
    return 'Fossil Fuels'
  elif source in ['geothermal', 'hydroelectric conventional', 'other biomass', 'solar thermal and photovoltaic', 'wind']: # Changed to lowercase
    return 'Renewable Energy'
  elif source in ['pumped storage', 'nuclear']: # Changed to lowercase
    return 'Mixed Energy'
  else:
    return 'Others'

electric_mix_df[electric_mix_df['date'] < '2011-12-01']['ENERGY SOURCE'].unique()

electric_mix_df_grouped = electric_mix_df_grouped.reset_index()

electric_mix_df_grouped['Category'] = electric_mix_df_grouped['ENERGY SOURCE'].apply(classificate_source)
print(electric_mix_df_grouped['Category'].unique())

# Group by date and Category to aggregate the generation per category for each date
electric_mix_df_grouped_by_category = electric_mix_df_grouped.groupby(['date', 'Category'])['GENERATION (Megawatthours)'].sum().reset_index()
# Now pivot the aggregated data
electric_mix_df_pivot = electric_mix_df_grouped_by_category.pivot(
    index='date',
    columns='Category',
    values='GENERATION (Megawatthours)'
).fillna(0)

import matplotlib.pyplot as plt

electric_mix_df_pivot.plot(figsize=(12,6))
plt.title('Monthly generation by energy source category (US-TOTAL)')
plt.ylabel('MWh')
plt.xlabel('Year')
plt.grid(True)
plt.show()

electric_mix_df_pivot = electric_mix_df_pivot.drop('2025-02-01')
electric_mix_df_pivot.tail()

"""### Main Dataset Cleaning: economical, EV and climate variables"""

variables = '/content/drive/MyDrive/2025-1/Monografia/Datasets & Data Dictionary/Current! Monthly Datasets and Data Dictionary/Dataset principal.csv'  # debe coincidir con el nombre del archivo subido
variables_mix = pd.read_csv(variables)
print(variables_mix.head())
variables_mix.dropna(how='all').shape

variables_mix.columns = [
    c.strip().replace('\n', ' ').replace(' ', '_').replace('__', '_') for c in variables_mix.columns
]
variables_mix = variables_mix.rename(columns={'Total_LDV_(includes_EV)': 'Total_LDV'})

variables_mix.rename(columns={'month': 'date'}, inplace=True) # ID to connect datasets

"""Definición de tipos"""

variables_mix['date'] = pd.to_datetime(variables_mix['date'], errors='coerce') #Month datetime type
variables_mix.dtypes

# NaN data
variables_mix.isna().sum()

variables_mix['Total_EV_Stock'] = variables_mix['BEV'] + variables_mix['PHEV']
print(variables_mix.tail())

"""# 3. Data Preparation

## Data Modeling
"""

print(variables_mix.head)
print(electric_mix_df_pivot.head)

df = pd.merge(electric_mix_df_pivot, variables_mix, on='date')
df.tail()

from google.colab import files
df.to_csv('df.csv', index=False)
files.download('df.csv')